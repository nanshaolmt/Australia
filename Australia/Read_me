上班第一天:

    pass



用config,配置mysql  信息
    aust_run 调用pipelines

    execute(sql, param)  带参数

int 112  traceback模块被用来跟踪异常返回信息
            shutil模块文件与文件的操作   copyfile(src, dst)： 将src文件内容复制至dst文件
            src： 源文件路径
            dst： 复制至dst文件，若dst文件不存在，将会生成一个dst文件；若存在将会被覆盖
            follow_symlinks：设置为True时，若src为软连接，则当成文件复制；如果设置为False，复制软连接。默认为True。Python3新增参数
            import shutil
            shutil.copyfile("file.txt","file_copy.txt")


            aust_run.py  模块os.system("cls")  清屏


代码 流程:
1 : 跑aust_run
    1:实例化 MYsql类(把游标,与日志封装到这个类的属性中.)
        拿到返回值 sql与
        self.logger = config.get_log("Mysql")
        并且调用本类的方法,并生成操作游标
        self.getConn(dictcur)
           cur = DictCursor if dictcur else Cursor   默认的是list 显示的结果.
           并且是字典的显示 查询的数据.
         _getconn  这个方法中 连接数据库
            PooledDB
            maxcached :
            每个http请求都会分发给一个进程，连接池中配置的连接数都是一个进程为单位的（即上面的最大连接数，都是在一个进程中的连接数）

        2: 调用getOne这个方法
            到个人信息表中去查询数据
            调用MYsql 类下边的 方法 pipelines.py
            'select count(*) from tb  where cond={"status": 1}'
            sql 是语句 val

        3:做判断调用 ImPlement_calss这个类
           主要用来测试selenium使用phantomJs--->澳大利亚签证系统.


        4: 调用main的主逻辑,ImPlement_calss类里边的main 方法.
              1: 登录,登录日志
                    1:selniun 使用,输入 用户名和密码
                    问题:inter_112  199行
                    element = self.find_visibility_element(locator)












澳大利亚签证系统:
    封装了 4张表为属性.:
        dc_business_australia_info_eng（个人信息英文表）
		dc_business_australia_info（个人信息中文表）
		dc_business_australia_order（公共表）
		dc_business_visa_account（旅行社进本信息表表）
    初始化:
       1: 传了一个参数是112 国家号.
           把日志封装为属性.
                日志是在配置文件中

        2: 调属性方法,对数据库进行查询.
               先 实例化MYsql(在pipelines.py 中)对象,调用查询方法.
               1:数据库调用日志.
               2:生成游标
                    技术点:
                    PooledDB : 生成数据库连接池.
                    DictCursor  让查询的结果字典形式
                    调用的数据库查询的结果为:字典形式.

                    MYsql 类中 self._conn =Mysql.__pool.connection()  直接调用就可以了

                3: 调用  MYSQL 这个类下边的方法select_sql
                  根据传参,然后拼接sql语句.  返回值(sql, val)

                4:调用getOne这个方法,查询具体的消息.并返回给 getOne 这调用的对象.封装到implemnet 这个类的属性中.
                    self.app=  getOne的调用的返回值.(查出来的是个人信息)

                5:实例化 tools 这个类的对象, 并且封装为这个类的属性中去.只作了:调用日志
                    self.Tools
                    class Tools() 基于数据库的数据进行组合或拆分（省份、日期、文件路径、文件名、后缀名）


                 6 : 封装FileTools这个类为属性.self.FileTools
                    uilian_file_tools.py: 下载文件和获取文件路径、文件名、后缀名模块

                 7:调用这个方法
                     self.initParmar() : # 签证信息 参数
                     把具体的信息封装到类中.
                     有个人的信息表,公共的表.
                           有从表里边去取的消息,因为一开始就是从库里边读取的数据就是字典类型.
                     1: 个人的信息表
                        selp.app = 查询出来的信息.
                     self.fullName   = self.app["username"].strip()
                     2:公共的表
                       sql, param = self.asql.select_sql(tb=self._tb_order, sel="group_type", cond={"id": self.order_id})

                        调用MYSQL 类下边的查询方法,做了一个繁琐的拼接语句,可以去改:
                                    (tb=self._tb_order, sel="group_type", cond={"id": self.order_id})
        SELSQL = 'SELECT group_type  FROM 公共表 where {"id": self.order_id} '

                        时间的装换: strftime("%Y-%m-%d-%H") 当前的时间
                         total_seconds()是获取两个时间之间的总差

                      3:旅行社表 查询数据表 dc_business_visa_account（旅行社进本信息表表
                             登录账号  登录密码


                             inter_112.py    263  status :啥意思.

                             报错抛异常,update_data 是更新的数据.
                                               update_data = {
                                                'ques': str(e),
                                                'status': 4,
                                                'utime': int(time())
                                            }

                            #"UPDATE 个人信息表  SET 字段条件 "
                            抛异常就走下面,不抛异常就不动.


                           调用 inter_112 212 行get_together 方法：获取陪同人员

                  8:  使用无头浏览器,并且封装在类属性里边,self.driver=  模拟浏览器.



今天尽可能 ,把功能摘出来,那些模块用了那些东西.明天干一早上.就ok




    config: 配置文件的技术点:
        import inspect  为了 拿到当前为文件的父目录,用来拼接路径.
        import configparser  模块:
        配置文件里边调用 logger日志.


问题: config 文件的 16 行的config.ini 这个文件
    实例化调了并赋值:
        就直接get()??

    inter_112.py .查询了几家旅行社
    inter_112.py .241--259 行  查
    报错的话就更新数据库,更新个人信息表

    为什么要去更新个人的数据库.
    inter_112.py 290 什么时候调用,并且开启事务的.

     无头浏览器:
        from selenium.webdriver.support.wait import WebDriverWait

        from selenium.webdriver.support import expected_conditions

        from selenium.webdriver.common.action_chains import ActionChains

           学习博客:
               https://blog.csdn.net/sinat_41774836/article/details/88965281

        time.strftime  使用

        时间格式:
                时间循环哪里 可以改 用列表推导式
        页面时间的选择.


        inter_112  257到268行有问题.ok了

        inter__112    63到65行 为什么 拼接路径后居删除了.

        huikian_selenium.py : 59---60行   不太明白 .

        inter_112   565
            报的啥错 if "Message" in str(e):


        拿到源码后的方法:
        text = driver.page_source  text.find()  等

        from datetime import datetime
        birthday_list = [1966, 10, 6]
        res = datetime(birthday_list[0], birthday_list[1], birthday_list[2]) - datetime(1970, 1, 1)
        print(res)

        啥意思




#
element.setAttribute(attributename,attributevalue)

setAttribute() 方法添加指定的属性，并为其赋指定的值,看到w3c的例子
js  代码 给这个标签添加属性.
document.getElementsByTagName("INPUT")[0].setAttribute("type","button");






expected_conditions     webDriverwait
一个隐含的等待就是告诉WebDriver在查找一个或多个元素（如果不是立即可用的）时轮询DOM一段时间。默认设置为0.一旦设置，隐式等待就设置为WebDriver对象实例的生命周期。

def  open(self, url, t='', timeout=10):

        try:
            WebDriverWait(self.driver, timeout).until(EC.title_contains(t))  #等待这个加载的标签出现
        '
        以下两个条件类验证title，验证传入的参数title是否等于或包含于driver.title
title_is
title_contains
        '
        except TimeoutException:
            self.logger.debug("open %s title error" % url)
        except Exception as msg:
            self.logger.debug("Error:%s" % msg)
        pass

        title_contains:判断当前页面的 title 是否包含预期字符串，返回布尔值


        driver: 传入WebDriver实例，即我们上例中的driver
        timeout: 超时时间，等待的最长时间（同时要考虑隐性等待时间）
        poll_frequency: 调用until或until_not中的方法的间隔时间，默认是0.5秒
        ignored_exceptions: 忽略的异常，如果在调用until或until_not的过程中抛出这个元组中的异常，
                则不中断代码，继续等待，如果抛出的是这个元组外的异常，则中断代码，抛出异常。默认只有NoSuchElementException。


不熟悉:By.CSS_SELECTOR
re.sub(r"[\[\]\\\"\s]", "", self.app[appname])

    pattern = re.compile(parttern)
    # print(str(pattern))
    match = pattern.search(src)


学习：-----

selenium  学习博客:https://blog.csdn.net/zwq912318834/article/details/78933910
expected_conditions是selenium的一个模块，其中包含一系列可用于判断的条件：


    select 的使用：
          参考博客  https://www.cnblogs.com/imyalost/p/7846653.html


selenium.webdriver.support.expected_conditions（模块）

        这两个条件类验证title，验证传入的参数title是否等于或包含于driver.title
        title_is
        title_contains

        这两个人条件验证元素是否出现，传入的参数都是元组类型的locator，如(By.ID, 'kw')
        顾名思义，一个只要一个符合条件的元素加载出来就通过；另一个必须所有符合条件的元素都加载出来才行
        presence_of_element_located
        presence_of_all_elements_located

        这三个条件验证元素是否可见，前两个传入参数是元组类型的locator，第三个传入WebElement
        第一个和第三个其实质是一样的
        visibility_of_element_located
        invisibility_of_element_located
        visibility_of

        这两个人条件判断某段文本是否出现在某元素中，一个判断元素的text，一个判断元素的value
        text_to_be_present_in_element
        text_to_be_present_in_element_value

        这个条件判断frame是否可切入，可传入locator元组或者直接传入定位方式：id、name、index或WebElement
        frame_to_be_available_and_switch_to_it

        这个条件判断是否有alert出现
        alert_is_present

        这个条件判断元素是否可点击，传入locator
        element_to_be_clickable

        这四个条件判断元素是否被选中，第一个条件传入WebElement对象，第二个传入locator元组
        第三个传入WebElement对象以及状态，相等返回True，否则返回False
        第四个传入locator以及状态，相等返回True，否则返回False
        element_to_be_selected
        element_located_to_be_selected
        element_selection_state_to_be
        element_located_selection_state_to_be

        最后一个条件判断一个元素是否仍在DOM中，传入WebElement对象，可以判断页面是否刷新了
        staleness_of


 pymsql  的使用：https://www.cnblogs.com/mmyy-blog/p/9629224.html


设置语言:
    from selenium import webdriver
    chrome_option = {
            'args': ['lang=en_US'],
            'extensions': []
        }
    desired_caps_web['chromeOptions']=chrome_option
    driver = webdriver.remote.webdriver.WebDriver(command_executor=server_url,desired_capabilities=desired_caps_web)


    # 启动时设置默认语言为英文
    from selenium import webdriver
    options = webdriver.ChromeOptions()
    options.add_argument('lang=en_US')
    driver = webdriver.Chrome(chrome_options = options)


from datetime import datetime
res = datetime(1970, 1, 1)
print(res,type(res))


代码优化:
 基本没啥优化的  一般都是这个时间， 用线程。
循环时间列表 转为 整数格式 .

if  elif
 self.workType = self.app["employment_status"]
            if self.workType == "3":
                # 12 就业状况 3 失业
                self.unemploymentTime = self.Tools.convertDateForAustralia(self.app['unemployment_time'])  # 失业时间
                self.oldWrok = self.app['unemployment_job']  # 上一份工作
            elif self.workType == "4":
                # 12 就业状况 4 退休
                self.retirementTime = self.Tools.convertDateForAustralia(self.app['retirement_time'])  # 退休时间
            elif self.workType == "99":
                # 12 就业状况 99 其它-原因
                self.workDeatil = self.app['employment_other']  # 工作详情






----------------

改哪些状态跑:----出现图片等.
代码更改:

​	出现问题:

​				1: 直卡着,一直不动俩种情况:
    ​				    第一一种情况是,因为 网卡.有网址
                        第二种: 没有网址.

                 2: 出现跑到中途  就挂了


                 3:中途卡了



​	测试速度问题:


​	出现  老人   学生    不同的身份 不一样会出现什么情况
    跟身份没关系 : 那只是 数据库的问题.不同的身份查询的数据是不一样的 是不会影响效率的,因为字段都是一样的



查询更改
    1 休改:
	inter_112.py   52  行
	_tb_info = "dc_business_australia_info_eng" 又查了一次个人英文信息表  aust_run.py 已经查过了
	可以去掉

    修改  2:
    inter_112  123到126   把for循环  改为 列表推导式

    时间这个位置可不可以改:
        不用时间搓去判断: inter_112   135 行.


    inter_112  #471     slef.application_id 这个做判断有问题， 一直都是



#上传文件   什么情况下走：




登录查询  用账号登
        官网账号状态   1使用  2不使用


跟身份没关系 : 那只是 数据库的问题.
不同的身份查询的数据是不一样的 是不会影响效率的,因为字段都是一样的啊
今日总结：
    看代码，备份，注释  不注释的话，容易忘记。

    流程  ，技术点 。

    出现的情况：

